install.packages("rJava")
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk-10.0.1/")
library(rJava)
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk-12.0.1/")
library(rJava)
if (!require("devtools")) install.packages("devtools")
devtools::install_bitbucket(repo = "bucklerlab/rtassel", ref = "master")
install.packages('devtools',dependencies = T)
library(devtools)
options(devtools.install.args = c("--no-multiarch", "--no-test-load"))
devtools::install_url('https://github.com/catboost/catboost/releases/download/v0.11.1/catboost-R-Windows-0.11.1.tgz', INSTALL_opts = c("--no-multiarch", "--no-test-load"))
install.packages("devtools", dependencies = T)
if (!require("devtools")) install.packages("devtools")
devtools::install_bitbucket(repo = "bucklerlab/rtassel", ref = "master")
library(rTASSEL)
library(rJava)
devtools::install_bitbucket(repo = "bucklerlab/rtassel", ref = "master")
git clone https://bitbucket.org/bucklerlab/rtassel.git
install.packages("rJava")
install.packages("rJava")
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk-11.0.3/")
library(rJAva)
install.packages("rJava")
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk-11.0.3/")
library(rJava)
if (!require("devtools")) install.packages("devtools")
devtools::install_bitbucket(repo = "bucklerlab/rtassel", ref = "master")
library(rTASSEL)
devtools::install_bitbucket(repo = "bucklerlab/rtassel", ref = "master")
if (!require("remotes")) install.packages("remotes")
remotes::install_bitbucket(
repo = "bucklerlab/rtassel",
build = TRUE,
build_opts = c("--no-resave-data", "--no-manual")
)
library(rJava)
rJava
1+1
install.packages(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_bitbucket(repo = "bucklerlab/rtassel", ref = "master")
getwd()
workingDir <- "./Coexpression Network/Medicago-truncatula-salt-rhizobia-coexpression-network/"
setwd(workingDir)
library(WGCNA)
options(stringsAsFactors = FALSE)
load("salt-toLoad.RData")
load("salt-toLoad.RData")
geneNames <- colnames(datExpr0_normalized)
for (color in moduleColors)
{
tempList <- names(datExpr0_normalized)[moduleColors==color]
write.csv(tempList, paste(color,"Salt.csv"))
}
unfilteredData <- read.csv("salt.csv") #("All_Unfiltered_50,443 genes.csv", stringsAsFactors = FALSE)
unfilteredData <- read.csv("salt.csv") #("All_Unfiltered_50,443 genes.csv", stringsAsFactors = FALSE)
dim(unfilteredData)
names(unfilteredData)
datExpr0 <- as.data.frame(t(unfilteredData))#[, -c(1)]))
colnames(datExpr0) <- datExpr0[1, ]
datExpr0 = datExpr0[-1, ]
datExpr0[] <- lapply(datExpr0, function(x) as.numeric(as.character(x)))
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
datExpr0_normalized <- normalize(datExpr0)
sizeGrWindow(12, 9)
# Convert labels to colors for plotting
mergedColors = labels2colors(net$colors)
moduleLabels <- net$colors
moduleColors <- labels2colors(net$colors)
MEs <- net$MEs;
geneTree <- net$dendrograms[[1]];
save(net, datExpr0, datExpr0_normalized, MEs, moduleLabels, moduleColors, geneTree,
file = "rhizobia-toLoad.RData")
# Convert labels to colors for plotting
mergedColors = labels2colors(net$colors)
moduleLabels <- net$colors
moduleColors <- labels2colors(net$colors)
MEs <- net$MEs;
nGenes <- ncol(datExpr0_normalized)
nSamples <- nrow(datExpr0_normalized)
# Open a graphical window
sizeGrWindow(6,6)
# Plot the dendrogram and the module colors underneath for block 1
plotDendroAndColors(net$dendrograms[[1]], moduleColors[net$blockGenes[[1]]],
"Module colors", main = "Rhizobia - Gene dendrogram with modules - Block 1",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
geneNames <- colnames(datExpr0_normalized)
geneNames
names(datExpr0_normalized)
for (color in moduleColors)
for (color in moduleColors)
{
tempList <- names(datExpr0_normalized)[moduleColors==color]
print(tempList)
write.csv(tempList, paste(color,"Salt.csv"))
}
for (color in moduleColors)
{
tempList <- names(datExpr0_normalized)[moduleColors==color]
write.csv(tempList, paste(color,"Salt.csv"))
}
for (color in moduleColors)
{
tempList <- names(datExpr0_normalized)[moduleColors==color]
write.csv(tempList, paste(color,"Salt.csv"))
}
rm(list = ls())
getwd()
workingDir <- "./Coexpression Network/Medicago-truncatula-salt-rhizobia-coexpression-network/"
setwd(workingDir)
library(WGCNA)
options(stringsAsFactors = FALSE)
load("no-salt-toLoad.RData")
nGenes <- ncol(datExpr0_normalized)
nSamples <- nrow(datExpr0_normalized)
# Open a graphical window
sizeGrWindow(6,6)
# Plot the dendrogram and the module colors underneath for block 1
plotDendroAndColors(net$dendrograms[[1]], moduleColors[net$blockGenes[[1]]],
"Module colors", main = "Rhizobia - Gene dendrogram with modules - Block 1",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
# Plot the dendrogram and the module colors underneath for block 2
plotDendroAndColors(net$dendrograms[[2]], moduleColors[net$blockGenes[[2]]],
"Module colors", main = "Rhizobia - Gene dendrogram with modules - block 2",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
nGenes <- ncol(datExpr0_normalized)
nSamples <- nrow(datExpr0_normalized)
geneNames <- colnames(datExpr0_normalized)
for (color in moduleColors)
{
tempList <- names(datExpr0_normalized)[moduleColors==color]
print(tempList)
write.csv(tempList, paste(color,"no-salt.csv"))
}
for (color in moduleColors)
{
tempList <- names(datExpr0_normalized)[moduleColors==color]
write.csv(tempList, paste(color,"no-salt.csv"))
}
