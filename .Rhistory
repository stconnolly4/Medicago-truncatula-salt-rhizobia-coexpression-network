install.packages("rJava")
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk-10.0.1/")
library(rJava)
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk-12.0.1/")
library(rJava)
if (!require("devtools")) install.packages("devtools")
devtools::install_bitbucket(repo = "bucklerlab/rtassel", ref = "master")
install.packages('devtools',dependencies = T)
library(devtools)
options(devtools.install.args = c("--no-multiarch", "--no-test-load"))
devtools::install_url('https://github.com/catboost/catboost/releases/download/v0.11.1/catboost-R-Windows-0.11.1.tgz', INSTALL_opts = c("--no-multiarch", "--no-test-load"))
install.packages("devtools", dependencies = T)
if (!require("devtools")) install.packages("devtools")
devtools::install_bitbucket(repo = "bucklerlab/rtassel", ref = "master")
library(rTASSEL)
library(rJava)
devtools::install_bitbucket(repo = "bucklerlab/rtassel", ref = "master")
git clone https://bitbucket.org/bucklerlab/rtassel.git
install.packages("rJava")
install.packages("rJava")
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk-11.0.3/")
library(rJAva)
install.packages("rJava")
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk-11.0.3/")
library(rJava)
if (!require("devtools")) install.packages("devtools")
devtools::install_bitbucket(repo = "bucklerlab/rtassel", ref = "master")
library(rTASSEL)
devtools::install_bitbucket(repo = "bucklerlab/rtassel", ref = "master")
if (!require("remotes")) install.packages("remotes")
remotes::install_bitbucket(
repo = "bucklerlab/rtassel",
build = TRUE,
build_opts = c("--no-resave-data", "--no-manual")
)
library(rJava)
rJava
1+1
install.packages(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_bitbucket(repo = "bucklerlab/rtassel", ref = "master")
getwd()
workingDir <- "./Coexpression Network/Medicago-truncatula-salt-rhizobia-coexpression-network/"
setwd(workingDir)
load("try1.RData")
moduleLabels
nGenes <- ncol(datExpr)
nGenes <- ncol(datExpr0)
load("femaleMouseTOM.RData") #baseData.RData
load(".RData") #baseData.RData
load("try1.RData")
nGenes <- ncol(datExpr0)
nSamples <- nrow(datExpr)
nSamples <- nrow(datExpr0)
# Open a graphical window
sizeGrWindow(9,9)
# Plot the dendrogram and the module colors underneath for block 1
plotDendroAndColors(bwnet$dendrograms[[1]], bwModuleColors[bwnet$blockGenes[[1]]],
"Module colors", main = "Gene dendrogram and module colors in block 1",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
library(WGCNA)
# Plot the dendrogram and the module colors underneath
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],
"Module colors",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
# Convert labels to colors for plotting
mergedColors = labels2colors(net$colors)
net <- blockwiseModules(datExpr0, power = 6,
TOMType = "unsigned", minModuleSize = 30,
reassignThreshold = 0, mergeCutHeight = 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs = TRUE,
saveTOMFileBase = "baseData",
verbose = 3)
datExpr0[] <- lapply(datExpr0, function(x) as.numeric(as.character(x)))
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
getwd()
