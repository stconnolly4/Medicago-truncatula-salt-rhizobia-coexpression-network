install.packages("rJava")
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk-10.0.1/")
library(rJava)
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk-12.0.1/")
library(rJava)
if (!require("devtools")) install.packages("devtools")
devtools::install_bitbucket(repo = "bucklerlab/rtassel", ref = "master")
install.packages('devtools',dependencies = T)
library(devtools)
options(devtools.install.args = c("--no-multiarch", "--no-test-load"))
devtools::install_url('https://github.com/catboost/catboost/releases/download/v0.11.1/catboost-R-Windows-0.11.1.tgz', INSTALL_opts = c("--no-multiarch", "--no-test-load"))
install.packages("devtools", dependencies = T)
if (!require("devtools")) install.packages("devtools")
devtools::install_bitbucket(repo = "bucklerlab/rtassel", ref = "master")
library(rTASSEL)
library(rJava)
devtools::install_bitbucket(repo = "bucklerlab/rtassel", ref = "master")
git clone https://bitbucket.org/bucklerlab/rtassel.git
install.packages("rJava")
install.packages("rJava")
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk-11.0.3/")
library(rJAva)
install.packages("rJava")
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk-11.0.3/")
library(rJava)
if (!require("devtools")) install.packages("devtools")
devtools::install_bitbucket(repo = "bucklerlab/rtassel", ref = "master")
library(rTASSEL)
devtools::install_bitbucket(repo = "bucklerlab/rtassel", ref = "master")
if (!require("remotes")) install.packages("remotes")
remotes::install_bitbucket(
repo = "bucklerlab/rtassel",
build = TRUE,
build_opts = c("--no-resave-data", "--no-manual")
)
library(rJava)
rJava
1+1
install.packages(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_bitbucket(repo = "bucklerlab/rtassel", ref = "master")
getwd()
workingDir <- "./Coexpression Network/Medicago-truncatula-salt-rhizobia-coexpression-network/"
setwd(workingDir)
library(WGCNA)
options(stringsAsFactors = FALSE)
load("toLoad.RData")
load("baseData-block.1")
load("baseData-block.1.RData")
load("baseData-block.2.RData")
load("baseData-block.3.RData")
load("baseData-block.4.RData")
# Plot the dendrogram and the module colors underneath for block 1
plotDendroAndColors(net$dendrograms[[1]], moduleColors[net$blockGenes[[1]]],
"Module colors", main = "Gene dendrogram and module colors in block 1",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
net <- blockwiseModules(datExpr0_normalized, power = 6, maxBlockSize = 10000,
TOMType = "unsigned", minModuleSize = 30,
reassignThreshold = 0, mergeCutHeight = 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs = TRUE,
saveTOMFileBase = "baseData",
verbose = 3)
View(datExpr0)
plotNetworkHeatmap(datExpr=datExpr0_normalized,
plotGenes=colnames(datExpr0),
power=6,
networkType="unsigned",
main="Network Heatmap")
colnames(datExpr0)
colnames(datExpr0_normalized)
geneNames <- colnames(datExpr0_normalized)
names(datExpr0_normalized)[moduleColors=="brown"]
for color in moduleColors
{
print(color)
}
for (color in moduleColors)
{
print(color)
}
for (color in moduleColors)
{
print(color)
names(datExpr0_normalized)[moduleColors==color]
}
for (color in moduleColors)
{
print(color)
print(names(datExpr0_normalized)[moduleColors==color])
}
for (color in moduleColors)
{
tempList <- names(datExpr0_normalized)[moduleColors==color]
cat(capture.output(print(tempList), file=color+".csv"))
}
for (color in moduleColors)
{
tempList <- names(datExpr0_normalized)[moduleColors==color]
cat(capture.output(print(tempList), file=paste(color,".csv")))
}
for (color in moduleColors)
{
tempList <- names(datExpr0_normalized)[moduleColors==color]
write.csv(tempList, paste(color,".csv"))
}
for (color in moduleColors)
{
tempList <- names(datExpr0_normalized)[moduleColors==color]
if ("8g103250" %in% tempList)
print(color)
#   write.csv(tempList, paste(color,".csv"))
}
for (color in moduleColors)
{
tempList <- names(datExpr0_normalized)[moduleColors==color]
if ("8g103250" %in% tempList)
{
print(color)
}
#   write.csv(tempList, paste(color,".csv"))
}
for (color in moduleColors)
{
tempList <- names(datExpr0_normalized)[moduleColors==color]
if ("Medtr0312s0020" %in% tempList)  #8g103250
{
print(color)
}
#   write.csv(tempList, paste(color,".csv"))
}
for (color in moduleColors)
{
tempList <- names(datExpr0_normalized)[moduleColors==color]
if ("2g101560" %in% tempList)  #8g103250
{
print(color)
}
#   write.csv(tempList, paste(color,".csv"))
}
for (color in moduleColors)
{
tempList <- names(datExpr0_normalized)[moduleColors==color]
if ("2g101560" %in% tempList)
{
print("2g101560")
print(color)
}
if ("2g101590" %in% tempList)
{
print("2g101590")
print(color)
}
if ("2g101610" %in% tempList)
{
print("2g101610")
print(color)
}
if ("2g101640" %in% tempList)
{
print("2g101640")
print(color)
}
if ("2g101650" %in% tempList)
{
print("2g101650")
print(color)
}
if ("8g103250" %in% tempList)
{
print("8g103250")
print(color)
}
if ("1g009200" %in% tempList)
{
print("1g009200")
print(color)
}
#   write.csv(tempList, paste(color,".csv"))
}
for (color in moduleColors)
{
print(color)
tempList <- names(datExpr0_normalized)[moduleColors==color]
if ("2g101560" %in% tempList)
{
print("2g101560")
print(color)
}
if ("2g101590" %in% tempList)
{
print("2g101590")
print(color)
}
if ("2g101610" %in% tempList)
{
print("2g101610")
print(color)
}
if ("2g101640" %in% tempList)
{
print("2g101640")
print(color)
}
if ("2g101650" %in% tempList)
{
print("2g101650")
print(color)
}
if ("8g103250" %in% tempList)
{
print("8g103250")
print(color)
}
if ("1g009200" %in% tempList)
{
print("1g009200")
print(color)
}
#   write.csv(tempList, paste(color,".csv"))
}
for (color in moduleColors)
{
tempList <- names(datExpr0_normalized)[moduleColors==color]
if ("2g101560" %in% tempList)
{
print("2g101560")
print(color)
}
if ("2g101590" %in% tempList)
{
print("2g101590")
print(color)
}
if ("2g101610" %in% tempList)
{
print("2g101610")
print(color)
}
if ("2g101640" %in% tempList)
{
print("2g101640")
print(color)
}
if ("2g101650" %in% tempList)
{
print("2g101650")
print(color)
}
if ("8g103250" %in% tempList)
{
print("8g103250")
print(color)
}
if ("1g009200" %in% tempList)
{
print("1g009200")
print(color)
}
#   write.csv(tempList, paste(color,".csv"))
}
